
##########################################
using Compat, Random, Distributions
Random.seed!(153)
global A=[1.0 -0.1 ; -0.1 1.0;0 0]  #matrix of average payoff in subjective model
a=0.5  #prior of model 1
T=1000
W=1000
num1=0
num2=0
ModT=Normal() #true payoff generating function.

function Epay(act,B)
   # if act==1||2
    ee=A[1,act]*B+A[2,act]*(1-B)
        return :(ee)
 #   else print("error of action space")
  #      return 0
 #   end
end


#= M11=Normal(A[1,1])
M21=Normal(A[2,1]) #model 2 #a21 means the average payoff of model 2 of action 1
M12=Normal(A[1,2])
M22=Normal(A[2,2]) =#
M=[Normal(A[1,1]) Normal(A[1,2]); Normal(A[2,1]) Normal(A[2,2])] #model 1  #a11 means the average payoff of model 1 of action 1
for j=1:W
Pri1=a #prior of H model(M1)
S=rand(ModT,T)
loglik_r=log((1-Pri1)/Pri1)
Belief1=1/(1+exp(loglik_r)) #belief of model 1.

for i=1:T
if Epay(1,Belief1)>Epay(2,Belief1)
        loglik_r=loglik_r+log(pdf.(M[2,1],S[i])/pdf.(M[1,1],S[i]))
         #=  if j<10 
            print(1)
            end =#

elseif Epay(1,Belief1)<Epay(2,Belief1)
        loglik_r=loglik_r+log(pdf.(M[2,2],S[i])/pdf.(M[1,2],S[i]))
         #=  if j<10 
            print(2)
            end =#
    else
        ra=rand(1:2)
        loglik_r=loglik_r+log(pdf.(M[2,ra],S[i])/pdf.(M[1,ra],S[i]))
        #=    if j<10 
            print(ra)
            end =#
        end
        Belief1=1/(1+exp(loglik_r))#belief of model 1.
end
 
    
if Belief1>0.9
        num1=num1+1
        num2=num2
    elseif Belief1<0.1
        num2=num2+1
    end
end
print("Times that M1 win is: ",num1)
print("Times that M2 win is: ",num2)




############################################
global A=[1.0 -0.1 ; -0.1 1.0;0.5 0.5]  #matrix of average payoff in subjective model
global AT=[0 0]
Pri=[0.1, 0.2, 0.7] #prior distribution of models.(order is w.r.t. payoff matrix)
T=1000
W=1000
num1=0
num2=0

#true payoff generating function.
mod=fill(Normal(),length(AT)) 
for i=1:length(AT)
    mod[i]=Normal(AT[i])
end
#subjective payoff generating function.For calculating density
M=fill(Normal(),size(A))
for i=1:size(A,1)
    for j=1:size(A,2)
        M[i,j]=Normal(A[i,j])
    end
end

function Epay(act,B)
   # if act==1||2
    ee=0
    for i=1:length(B)
    ee=ee+A[i,act]*B[i]
    end
        return ee
 #   else print("error of action space")
  #      return 0
 #   end
end


#########main
for j=1:W
S=vector(undef,T)  #empty sample vector
loglik_r=log.(Pri)-fill(log(Pri[1]),length(Pri))  #prior loglikelihood
    
#update loglikelihood
    for e=1:size(loglik_r)
        loglik_r[e]=loglik_r[e]+logpdf.(M[e,action],S[t])-logpdf.(M[1,action],S[t])
    end
         
    

Belief1=1/(1+exp(loglik_r)) #belief of model 1.

    
    #loop for choosing actions.
for i=1:T
if Epay(1,Belief1)>Epay(2,Belief1)
        loglik_r=loglik_r+log(pdf.(M[2,1],S[i])/pdf.(M[1,1],S[i]))
         #=  if j<10 
            print(1)
            end =#

elseif Epay(1,Belief1)<Epay(2,Belief1)
        loglik_r=loglik_r+log(pdf.(M[2,2],S[i])/pdf.(M[1,2],S[i]))
         #=  if j<10 
            print(2)
            end =#
    else
        ra=rand(1:2)
        loglik_r=loglik_r+log(pdf.(M[2,ra],S[i])/pdf.(M[1,ra],S[i]))
        #=    if j<10 
            print(ra)
            end =#
        end
        Belief1=1/(1+exp(loglik_r))#belief of model 1.
end
 
    
if Belief1>0.9
        num1=num1+1
        num2=num2
    elseif Belief1<0.1
        num2=num2+1
    end
end
print("Times that M1 win is: ",num1)
print("Times that M2 win is: ",num2)


